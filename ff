

Thought for a second
Below is a revised Confluence-style documentation that offers a stronger introduction to Stratos, clarifies its evolution from previous GCP CNE (Cloud Native Engineering) experiences, and highlights key benefits (e.g., simplified management, enhanced visibility, improved efficiency, user-friendliness). It’s designed for new joiners who need to quickly grasp what Stratos is and how it helps them.

Stratos Onboarding Guide
1. Introduction
1.1 Evolution from GCP CNE to Stratos
In the past, our teams leveraged GCP CNE (Cloud Native Engineering) to build and deploy applications in the cloud. While this provided a starting point for modernization, it also revealed key pain points—like multiple manual steps, siloed tooling, and long lead times to provision resources.

To address these challenges and further streamline the developer experience, Stratos was introduced. Built on top of open-source technologies (notably Cloud Foundry and Kubernetes), Stratos extends the core principles of GCP CNE with enhanced automation, unified interfaces, and opinionated best practices.

1.2 What Is Stratos and Its Uses?
At its core, Stratos is a web-based user interface designed to:

Centralize management of cloud-native applications (e.g., on Cloud Foundry, Kubernetes).
Improve visibility into the health and performance of deployments.
Automate everyday tasks (like environment provisioning, application updates) so engineers can focus on value-added work.
Key Benefits:

Simplified Management
One interface to handle multiple clusters, reducing the hassle of juggling disparate tools.
Enhanced Visibility
Real-time insights (logs, metrics) aid in quick decision-making and root-cause analysis.
Improved Efficiency
Automated workflows and streamlined resource management mean faster deployments and fewer manual errors.
User-Friendly
A straightforward UI lowers the technical barrier, enabling a wider audience to adopt modern DevOps practices.
GCP-Integrated
Although Stratos works across different platforms, it’s especially tailored to enhance the management experience on GCP, delivering a cohesive and efficient way to handle cloud-native applications.
In short: Stratos builds on GCP CNE foundations, offering faster provisioning, self-service, and a golden path approach to deploying and managing applications at scale.

2. Our Evolving Journey
Challenges We Faced

Multiple disjointed tools and siloed processes.
Long lead times (30+ days) to set up new environments.
Limited self-service, resulting in high cognitive load on engineering teams.
Early Successes

By focusing on automation and self-service, we cut provisioning times to under 1 day for many public cloud use cases.
Established golden paths for repeatable tasks (e.g., deploying apps, provisioning databases), reducing errors and variance.
Continual Improvement

Stratos itself is constantly evolving to include new environments, features, and integrations (e.g., harnessing harness pipelines, advanced security controls).
The roadmap involves extending the same user-friendly and automated approaches across various teams, on-premises solutions, and additional cloud providers.
3. Core Components of Stratos
3.1 Backstage (Frontend)
Developer Portal: A single entry point for discovering services, documentation, and available “golden path” templates.
Intuitive UI: Allows users to launch provisioning tasks with minimal clicks, fetch real-time status updates, and locate relevant knowledge bases or tutorials.
3.2 Orchestrator (Backend)
Infrastructure-as-Code (IaC): Automates creation and management of resources via Terraform, GitOps, or other provisioning frameworks.
CI/CD Integration: Hooks into Git repositories, pipelines, and environment promotion workflows for consistent deployments.
Policy Enforcement: Ensures that new deployments adhere to security, networking, and compliance requirements without manual oversight.
Together, Backstage and Orchestrator align to give engineers a unified, end-to-end environment provisioning and management experience.
