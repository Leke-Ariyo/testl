Below is an **updated Confluence-style documentation** that integrates the **missing points** about **opinionated golden paths**, **supported tasks** (BigQuery, web apps, PostgreSQL), and **the key challenges** Stratos addresses. It is designed as a **comprehensive yet concise** guide for **new joiners** wanting a solid overview of Stratos—where it came from, what it does, and why it’s important.

---

# **Stratos Onboarding Guide**

## **1. Introduction**

### **1.1 From GCP CNE to Stratos**  
Previously, teams leveraged **GCP CNE (Cloud Native Engineering)** to deploy applications on Google Cloud. While this enabled some modernization, it also highlighted core pain points:

- **Multiple Tools & Interfaces**: Developers juggled numerous dashboards and CLIs.  
- **Manual Steps**: Provisioning required tickets and human intervention, causing delays.  
- **Limited Visibility**: Teams had fragmented insights into resource usage and application health.

To solve these issues and **further streamline** the developer experience, we introduced **Stratos**—an evolution of GCP CNE, **purpose-built** to enhance automation, unify interfaces, and enforce **opinionated best practices** for modern application development.

### **1.2 Why Stratos?**
- **Faster Provisioning**: Opinionated “golden paths” reduce setup from weeks to hours (or even minutes).  
- **Unified Interface**: A single web-based UI combines cluster management, deployment workflows, and monitoring.  
- **Scalability & Adaptability**: Supports varied workloads (e.g., microservices, data pipelines, web apps) across Cloud Foundry and Kubernetes.

---

## **2. Our Evolving Journey**

1. **Initial Challenges**  
   - **Inconsistent Onboarding**: Some teams took 30+ days to gain new environments.  
   - **Minimal Self-Service**: Heavy reliance on tickets drove up wait times and operational costs.  
   - **High Cognitive Load**: Engineers navigated different tools and architectures, complicating day-to-day tasks.

2. **Adopting Stratos**  
   - Built on **open-source** frameworks like Cloud Foundry and Kubernetes, **Stratos** introduced **automation**, **unified visibility**, and a **user-friendly** UI.  
   - Early adopters experienced dramatically improved speed, standardized workflows, and reduced manual error rates.

3. **Continuous Improvement**  
   - Stratos remains under active development, integrating new features and expanding beyond GCP to meet diverse engineering requirements.  
   - Future roadmap initiatives include better multi-cloud support, more golden paths, and deeper compliance automation.

---

## **3. What Is Stratos?**

### **3.1 Core Definition**  
**Stratos** is an **open-source, web-based user interface** for managing applications on **Cloud Foundry** and **Kubernetes**. It centralizes deployment, visibility, and operational tasks, enabling teams to **develop, ship, and run** cloud-native applications more efficiently.

### **3.2 Golden Paths & Supported Tasks**  
Stratos comes with **opinionated, supported workflows** for specific tasks. These “golden paths” are **pre-approved** and **standardized** to help teams move faster and avoid reinventing the wheel. Notable examples include:

1. **Deploying and Managing Access to BigQuery Datasets**  
2. **Building and Deploying Web Apps, API Proxies, and Containers**  
3. **Provisioning PostgreSQL Databases**

By offering these **automated** and **simplified** workflows, Stratos ensures consistency in critical areas—security, governance, naming conventions—across teams and environments.

### **3.3 Purpose & Core Benefits**  
1. **Streamline the Engineering Experience**  
   - Consolidates multiple tasks (provisioning, deployment, monitoring) into a single interface.  
2. **Enable Application Modernization**  
   - Provides standardized, cloud-native approaches that help teams adopt modern DevOps practices without steep learning curves.

---

## **4. Challenges Stratos Addresses**

Stratos directly tackles many organizational and technical pain points:

- **Poor Developer Experience**: By bundling essential tools and automations, developers can focus on writing code rather than orchestrating infrastructure.  
- **Flat Network**: It introduces segmentation and best-practice networking strategies for more robust and secure setups.  
- **Multiple Landing Zones & Architectures**: Centralizes management to mitigate architectural sprawl.  
- **Proliferation of Infrastructure Resources**: Automated provisioning ensures resources follow strict naming and usage conventions, reducing duplication and costs.  
- **Heavily Ticketed Experience**: Self-service capabilities slash ticket queues and manual approvals, speeding up delivery.  
- **Complex Identity & Access Management**: Standardizes access control in line with best-practice IAM configurations.  
- **Lack of Standardization**: Golden paths, templates, and policy enforcement bring consistency to a historically fragmented environment.  
- **High Cognitive Load**: Engineers no longer need to learn multiple tools for each environment; Stratos abstracts away underlying complexity.

---

## **5. Getting a Stratos Developer Account**

1. **Request Access**  
   - Go to **IT@LBG** and submit a “Stratos Developer Account” form. Provide your team/project details and any special requirements.  

2. **Manager Approval**  
   - Your line manager reviews and approves your request, ensuring appropriate access levels and governance.  

3. **Onboarding**  
   - After approval, you’ll get instructions to:
     - Set up VPN (if needed)  
     - Link to Git repositories  
     - Configure any required pipelines (e.g., harness, Terraform)  
     - Explore the **Backstage** portal to discover golden paths and kick off your first deployments

> **Pro Tip**: If you get stuck at any point, reach out to your **Stratos champion** or open a support ticket. These resources can guide you through troubleshooting and advanced usage.

---

## **6. A Brief Note on Platform 3.0**

Stratos aligns with our broader **Platform 3.0** initiative—an effort to modernize engineering processes and toolsets across the organization. Although you may hear less about the term “Stratos” over time, **its capabilities, golden paths, and automation** will remain core to how we rapidly provision resources, reduce costs, and uplift developer productivity.

---

## **7. Conclusion**

By now, you should understand:

- **Stratos’s Background**: Evolved from GCP CNE to solve real-world pain points around complexity, manual steps, and fragmented toolchains.  
- **What Stratos Offers**: Opinionated golden paths for BigQuery, containers, PostgreSQL, plus a single UI for cluster and application management.  
- **Why It Matters**: Speeds up deployments, enforces best practices, and lowers the cognitive load on engineering teams.  
- **How to Get Started**: Steps to request a developer account and basic onboarding guidelines.

### **Next Steps**  
- **Review Tutorials**: [Link Placeholder]  
- **Explore Golden Paths**: [Link Placeholder]  
- **Check Announcements**: [Link Placeholder] for updates on new features and best practices.

---

> **Remember**: Stratos is an ongoing journey. Keep an eye on updates and improvements—your feedback and contributions will help us continue refining Stratos for the entire organization. If you have questions or suggestions, don’t hesitate to reach out!
